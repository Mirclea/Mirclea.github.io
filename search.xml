<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OpenCV(一)</title>
      <link href="/2022/09/16/OpenCV/"/>
      <url>/2022/09/16/OpenCV/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python==xx.xx</span><br><span class="line">pip insatll opencv-contrib-python==xx.xx</span><br></pre></td></tr></table></figure><blockquote><p>注意两个包的版本号要相同</p></blockquote><h3 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h3><blockquote><p>opencv读入的图片默认是RBG格式的，若要用matplotlib画图需要转成RGB格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>) <span class="comment"># 读入图片</span></span><br><span class="line"><span class="built_in">type</span>(img)</span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>一般来说，图片的存储形式为三维矩阵(宽 <em> 高 </em> 颜色通道数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>, img) <span class="comment"># 窗口名字、图像矩阵</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>) <span class="comment"># 等待自动关闭时间（ms级别），使用0代表手动关闭，按任意一个键关闭</span></span><br><span class="line">cv2.destoryAllWindows() <span class="comment"># 关闭窗口</span></span><br></pre></td></tr></table></figure><p>封装一下展示图片的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_image</span>(<span class="params">windows_name, image</span>):</span><br><span class="line">    cv2.imshow(windows_name, image)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h4 id="灰度图"><a href="#灰度图" class="headerlink" title="灰度图"></a>灰度图</h4><p> 读取灰度图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image2 = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br></pre></td></tr></table></figure><p> 在图像读取中添加一个第二参数<code>cv2.IMREAD_GRAYSCALE</code>,代表读取该图像的灰度图</p><p>对比代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">image1 = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>)</span><br><span class="line">image2 = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="built_in">print</span>(image1.shape)</span><br><span class="line"><span class="built_in">print</span>(image2.shape)</span><br><span class="line">show_image(<span class="string">&#x27;img1&#x27;</span>, image1)</span><br><span class="line">show_image(<span class="string">&#x27;img2&#x27;</span>, image2)</span><br></pre></td></tr></table></figure><p>这个可以看到，输出的<code>image1.shape=(w,h,3)</code>而<code>image2.shape=(w,h)</code>并且图片也从彩色图片变成黑白图片。</p><h3 id="读取视频"><a href="#读取视频" class="headerlink" title="读取视频"></a>读取视频</h3><blockquote><p>视频实际上就是多张图片按照先后顺序依次展示的样子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vc = cv2.VideoCapture(<span class="string">r&#x27;./img/1.mp4&#x27;</span>)  <span class="comment"># 读取视频</span></span><br><span class="line"><span class="keyword">if</span> vc.isOpened(): <span class="comment"># 检查是否可以打开</span></span><br><span class="line">    opened, frame = vc.read()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opened = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>  对于一个已经打开的视频，每一次读取都会读到一帧的静态图像 <code>opened, frame = vc.read()</code>    (两个参数，一个是不是视频的有效帧、一个是图像帧)</p><p>视频展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vc = cv2.VideoCapture(<span class="string">r&#x27;./img/1.mp4&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> vc.isOpened():</span><br><span class="line">    opened, frame = vc.read()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    opened = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频展示</span></span><br><span class="line"><span class="keyword">while</span> opened:</span><br><span class="line">    ret, frame = vc.read()</span><br><span class="line">    <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">     <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">       gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) <span class="comment"># 图像转化成灰度图</span></span><br><span class="line">       cv2.imshow(<span class="string">&#x27;result&#x27;</span>,gray)</span><br><span class="line">       <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>: <span class="comment"># 调整视频播放倍速</span></span><br><span class="line">breakvc.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><blockquote><p>从上面可以看到，通常我们说的对于视频的处理，实际上是对于每一帧的图像进行处理。</p></blockquote><h3 id="图像的颜色通道"><a href="#图像的颜色通道" class="headerlink" title="图像的颜色通道"></a>图像的颜色通道</h3><h4 id="切分颜色通道"><a href="#切分颜色通道" class="headerlink" title="切分颜色通道"></a>切分颜色通道</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b, g, r = cv2.split(image) <span class="comment"># (576, 1024, 3)</span></span><br><span class="line"><span class="built_in">print</span>(b.shape) <span class="comment"># (576, 1024)</span></span><br><span class="line"><span class="built_in">print</span>(g.shape) <span class="comment"># (576, 1024)</span></span><br><span class="line"><span class="built_in">print</span>(r.shape) <span class="comment"># (576, 1024)</span></span><br></pre></td></tr></table></figure><h4 id="合并颜色通道"><a href="#合并颜色通道" class="headerlink" title="合并颜色通道"></a>合并颜色通道</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">im = cv2.merge((b, g, r)) <span class="comment"># (576, 1024)</span></span><br><span class="line"><span class="built_in">print</span>(im.shape) <span class="comment"># (576, 1024, 3)</span></span><br></pre></td></tr></table></figure><h4 id="单通道提取"><a href="#单通道提取" class="headerlink" title="单通道提取"></a>单通道提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>)</span><br><span class="line">cur_img = image.copy()</span><br><span class="line">cur_img[:, :, <span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">cur_img[:, :, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">show_image(<span class="string">&#x27;r&#x27;</span>, cur_img)</span><br></pre></td></tr></table></figure><blockquote><p>注意：（0,1,2）=== （b,g,r）这和一般我们的思想rgb不同</p></blockquote><h3 id="边界填充"><a href="#边界填充" class="headerlink" title="边界填充"></a>边界填充</h3><p>  cv2中一共有五种边界填充方式(replicate、reflect、reflect101、wrap、constant)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top, right, left, bottom = (<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">replicate = cv2.copyMakeBorder(img, top, bottom, left, right, </span><br><span class="line">                               borderType=cv2.BORDER_REPLICATE)</span><br><span class="line">reflect = cv2.copyMakeBorder(img, top, bottom, left, right, </span><br><span class="line">                             borderType=cv2.BORDER_REFLECT)</span><br><span class="line">reflect101 = cv2.copyMakeBorder(img, top, bottom, left, right, </span><br><span class="line">                                borderType=cv2.BORDER_REFLECT_101)</span><br><span class="line">wrap = cv2.copyMakeBorder(img, top, bottom, left, right, borderType=cv2.BORDER_WRAP)</span><br><span class="line">constant = cv2.copyMakeBorder(img, top, bottom, left, right, </span><br><span class="line">                              borderType=cv2.BORDER_CONSTANT, value=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>BORDER_REPLICATE : 复制法，复制最边缘的像素点进行填充</li><li>BORDER_REFLECT：反射法，对感兴趣的图像中的像素在两边进行复制例如：fedcba|abcdefgh|hgfedcb</li><li>BORDER_REFLECT_101：以最边缘的像素为轴做对称如：hgfedcb|abcdefgh|gfedcba</li><li>BORDER_WRAP：外包装法，如：cdefgh|abcdefgh|abcdefg</li><li>BORDER_CONSTANT：常量填充</li></ul><h3 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h3><ul><li>直接在读出的图像矩阵加常数，对数据图像矩阵的所有值都进行加上这个常数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img1 = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>)</span><br><span class="line">img2 = img1 + <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>将两图像（规格相同）直接相加（用+号相加），对应数值相加并且若和 <code>s&gt;255</code> 则 <code>s=s%256</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img3 = img1 + img2</span><br><span class="line"><span class="comment"># img1.shape = img2.shape = (576, 1024, 3)</span></span><br></pre></td></tr></table></figure><ul><li>利用<code>cv2.add()</code>对两个图像相加，对应数值相加，若 <code>s&gt;255</code> 则 <code>s=255</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img4 = cv2.add(img1, img2)</span><br></pre></td></tr></table></figure><h4 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h4><blockquote><p>注意对于融合的图像大小规格要相同才可以进行融合，对于不同大小的图片进行融合我们需要利用<code>cv2.resize()</code> 来调整图片大小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img1 = cv2.imread(<span class="string">r&#x27;./img/2.jpg&#x27;</span>) <span class="comment"># (576,1024,3)</span></span><br><span class="line">img2 = cv2.imread(<span class="string">r&#x27;./img/2-1.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">img2 = cv2.resize(img2, (<span class="number">1024</span>, <span class="number">576</span>)) <span class="comment"># 注意参数的位置</span></span><br></pre></td></tr></table></figure><p><code>cv2.resize()</code> 的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show_image(<span class="string">&#x27;0&#x27;</span>, img1)</span><br><span class="line">res = cv2.resize(img1, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">2</span>, fy=<span class="number">1</span>) <span class="comment"># x轴方向伸展2倍</span></span><br><span class="line">show_image(<span class="string">&#x27;1&#x27;</span>, res)</span><br><span class="line">res = cv2.resize(img1, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">1</span>, fy=<span class="number">2</span>) <span class="comment"># y轴方向伸展2倍</span></span><br><span class="line">show_image(<span class="string">&#x27;2&#x27;</span>, res)</span><br><span class="line">res = cv2.resize(img1, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">1.5</span>, fy=<span class="number">1.5</span>) <span class="comment"># x、y轴同时伸展1.5倍</span></span><br><span class="line">show_image(<span class="string">&#x27;3&#x27;</span>, res)</span><br></pre></td></tr></table></figure><p>图像融合可以看成公式 </p><script type="math/tex; mode=display">R=αx_1+βx_2+b，其中x_1，x_2为输入图像,α、β为图像对应的权重，b为图像的亮度偏置值</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = cv2.addWeighted(img1, <span class="number">0.4</span>, img2, <span class="number">0.6</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>cv2.addWeighted(x1, α, x2, β, b)</code> 对应的参数</p><h3 id="阈值处理"><a href="#阈值处理" class="headerlink" title="阈值处理"></a>阈值处理</h3><p>二值化处理函数<code>ret,dst=cv2.threshold(src,thresh,maxval,type)</code> 对应的参数解释如下：</p><ul><li><code>src</code>: 输入图，只能输入<strong>单通道</strong>图像，通常是灰度图</li><li><code>dst</code>: 输出图</li><li><code>thresh</code>: 阈值,返回值中的<code>ret</code>就是该值</li><li><code>maxval</code>: 当像素超出阈值（或者是小于阈值，根据type决定）所赋予的值</li><li><code>type</code>: 二值化操作类型，包含5种类型：<ul><li><code>cv2.THRESH_BINARY</code> 超过阈值部分取 <code>maxval</code> （最大值），否则取0</li><li><code>cv2.THRESH_BINARY_INV</code> <code>cv2.THRESH_BINARY</code>的反转</li><li><code>cv2.THRESH_TRUNC</code> 大于阈值的部分设为阈值，否则不变</li><li><code>cv2.THRESH_TOZERO</code> 大于阈值的部分不变，否则设为0</li><li><code>cv2.THRESH_TOZERO_INV</code> <code>cv2.THRESH_TOZERO</code> 的反转</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ret, thresh1 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</span><br><span class="line">images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line">names = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;THRESH_BINARY&quot;</span>, <span class="string">&quot;THRESH_BINARY_INV&quot;</span>, <span class="string">&quot;THRESH_TRUNC&quot;</span>, <span class="string">&quot;THRESH_TOZERO&quot;</span>, <span class="string">&quot;THRESH_TOZERO_INV&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i + <span class="number">1</span>)</span><br><span class="line">    plt.imshow(images[i], <span class="string">&quot;gray&quot;</span>)</span><br><span class="line">    plt.title(names[i])</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>输出的图像对比图</p><p><img src="https://mirclea.oss-cn-shenzhen.aliyuncs.com/image-20220917112910109.png" alt="二值化模式对比图"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_String_API</title>
      <link href="/2022/09/12/javaString/"/>
      <url>/2022/09/12/javaString/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串反转代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseTestOne</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s).reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode(T4)</title>
      <link href="/2022/09/09/leetcode04/"/>
      <url>/2022/09/09/leetcode04/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-—-04"><a href="#LeetCode-—-04" class="headerlink" title="LeetCode —- 04"></a>LeetCode —- 04</h1><blockquote><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。算法的时间复杂度应该为 O(log (m+n)) 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length + nums2.length;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> find(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, n / <span class="number">2</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> find(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, n / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>) (left + right) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>) find(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, n / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] num1, <span class="type">int</span> i, <span class="type">int</span>[] num2, <span class="type">int</span> j, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1.length - i &gt; num2.length - j) &#123;</span><br><span class="line">            <span class="keyword">return</span> find(num2, j, num1, i, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num1.length == i) &#123;</span><br><span class="line">            <span class="keyword">return</span> num2[j + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> min(num1[i], num2[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx1</span> <span class="operator">=</span> min(num1.length, i + k / <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx2</span> <span class="operator">=</span> j + k - k / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1[idx1 - <span class="number">1</span>] &lt; num2[idx2 - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> find(num1, idx1, num2, j, k - (idx1 - i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> find(num1, i, num2, idx2, k - (idx2 - j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如上；</p><p>思路主要是利用了二分查找的思想，对于两个数组的总长度 l=l1+l2 奇偶的处理是不同的，这个题目实际上是求连个有序数组的第k大小的数。利用k=l/2(初始值)在每个数组中初始值都有设为i=k/2;j=k-k/2对比大小比较小的一部分明显是不合适的可以直接从数组中删除在更新新的k值完成递归</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL</title>
      <link href="/2022/09/09/OpenGL/"/>
      <url>/2022/09/09/OpenGL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/07/hello-world/"/>
      <url>/2022/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
